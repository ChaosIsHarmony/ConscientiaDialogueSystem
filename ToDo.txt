Needed

- Dialogue parser
- Dialogue reader/writer/editor

Decisions

- How to make it plug 'n play?
	- Prereqs:
		- Autocreated file(s) <-[Merge into one big file?][Use JSON or XML?]
			- Cues
				- Used to populate dictionaries to check if a certain address should create some special effect
					- e.g., Multicheckers
				- Format as follows
				[/CUE_NAME]
				|ADDRESS,
				...
				[CUE_NAME/]
			- TriggeredEvents
				- Tracks in-game events that affect dialogue options
				- Format as follows
				[/NUMBER]
				true/false, description
				[NUMBER/]
			- Npc
				- Dialogue addresses
				- Format as follows
				[/NPC_ID]
				|AREA_ID:ADDRESS,
				|AREA_ID:ADDRESS,
				...
				[NPC_ID/]
			- PersonalityAffinities
				- Keeps track of player affinities
				[/PERSONALITY]
				VALUE
				[PERSONALITY/]
			- NpcNameToId
				- List of NPC names mapped to IDs
			- AreaNameToId
				- List of Areas mapped to their IDs
			- Multichecker
				- Check which dialogue address to open in case of multiple events
			- General
				- CurrentLocation
				- CurrentNpc
				- Settings
					- numPersonalities (number of personalities available)
					- numPlayerResponses (max possible responses displayed [if available])
		- Autocreated directories
			- Dialogue
				- Dialogue files by area
				- Format as follows
				[/ADDRESS_ID]
				|triggered event:ADDRESS_ID
				|dialogue_text
				|responses
				[ADDRESS_ID/]
	- API
		- Dialogue()
			- can function as a persistent object
			- can also function as a static library and load on every encounter
		- initDialogueEncounter(int npcID, String gameArea)
			- Finds appropriate dialogue for given Npc in the selected GameArea
		- updateDialogueEncounter(PlayerResponse playerResponse)
			- submits player response
			- updates personality stats
			- checks for triggered events
		- isDialogueFinished()
			- returns true if there is no more dialogue available in this tree
		- getDialogue()
			- returns String of next available dialogue
		- getAvailableResponses()
			- Returns a list of available options as PlayerResponses
		- toString()
			- for deubgging
			- Outputs 
				- Current NPC (name:ID)
				- Personality Affinities ([Personality:Points, ...])
				- Current Location (area:ID)
				- Current Address (human_readable:numerical)
	- Classes
		- PlayerResponse
			- personalityType
			- affinityPoints
			- responseText
			- destinationAddress
			
		
Things to keep in mind:

- @ forcers
- TriggeredEvents: reading vs writing
- cue indicators
- file loading (Strategy pattern so you can use gdx loader and also just normal java loading)
- AbstractFactory for DialogueParser (so that you could use CML, XML, or JSON dialogue formats)
	- ParserFactory <- AbstractFactory
	- CMLParserFactory, XMLParserFactory, JSONParserFactory <- ConcreteFactories
	- DialogueText, DialogueResponse, DialoguePersonalityInfo <- AbstractProducts
	- CMLDialogueText, etc. <- ConcreteProducts
	
		